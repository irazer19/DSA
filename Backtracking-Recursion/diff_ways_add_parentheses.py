"""
Given a string expression of numbers and operators, return all possible results from computing all the different
possible ways to group numbers and operators. You may return the answer in any order.

Input: expression = "2*3-4*5"
Output: [-34,-14,-10,-10,10]
Explanation:
(2*(3-(4*5))) = -34
((2*3)-(4*5)) = -14
((2*(3-4))*5) = -10
(2*((3-4)*5)) = -10
(((2*3)-4)*5) = 10
"""


def diffWaysToAddParentheses(exp):
    # Time = Space = O(C(k)), where k is the number of operators and C(k) is the kth Catalan number.
    """
    Logic:
    At each operator, we divide the expression into left and right halves, and then make recursive call with each
    expression. The output of the recursive call is the list of all possible values which was generated by that
    expression, now after we get the result from left half and right half, we use the current operator(+,-,*) between
    every values to find the result for the current expression.

    We store the expression's result in the cache for future use.
    """
    # Edge case.
    if not exp:
        return None
    return findWays(exp, {})


def findWays(exp, cache):
    # If the expression was already calculated, then return the result.
    if exp in cache:
        return cache[exp]
    # While diving the expression, if the current expression is only a single digit, then return it as integer.
    if exp.isdigit():
        return [int(exp)]

    # Variable to store the all the values which can be generated from the current expression using different
    # configuration of parentheses.
    currTotalWays = []
    # Looping every index in the expression.
    for i in range(len(exp)):
        # If the idx contains an operator, then we divide.
        if exp[i] in ['+', '-', '*']:
            # Left and right expression without the current operator.
            leftExp = exp[0: i]
            rightExp = exp[i + 1:]

            # Making function calls for each expression.
            leftExpResult = findWays(leftExp, cache)
            rightExpResult = findWays(rightExp, cache)

            # Computing the values using the current operator.
            # Each left value can be combined with each right value.
            for leftVal in leftExpResult:
                for rightVal in rightExpResult:
                    if exp[i] == '+':
                        currTotalWays.append(leftVal + rightVal)
                    elif exp[i] == '-':
                        currTotalWays.append(leftVal - rightVal)
                    elif exp[i] == '*':
                        currTotalWays.append(leftVal * rightVal)
    # Storing in cache.
    cache[exp] = currTotalWays
    return currTotalWays


print(diffWaysToAddParentheses('2*3-4*5'))
